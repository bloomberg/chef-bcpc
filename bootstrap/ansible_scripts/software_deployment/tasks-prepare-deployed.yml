# this is a separate task list so that it can be called by other playbooks
# without prompting multiple times for environment verification
---
- name: Perform synchronization of Git staging
  synchronize: src={{ controlnode_git_staging_dir }}/ dest={{ bootstrap_git_staging_dir }}/
  become: no
  tags:
    - synchronize

- name: Perform synchronization of local bootstrap files
  synchronize: src={{ controlnode_files_dir }}/ dest={{ bootstrap_files_dir }}/
  become: no
  tags:
    - synchronize

- name: Install needed packages for deployment
  apt: name={{ item }} state=present
  with_items:
    - apt
    - rsync

- name: Remove old deployment directory
  file: path={{ bootstrap_deployed_dir }} state=absent

- name: Recreate deployment directory
  file: path={{ bootstrap_deployed_dir }} state=directory

- name: Generate UUID for temporary staging location
  command: uuidgen
  register: uuid

- name: Create temporary staging location
  file: path=/tmp/{{ uuid.stdout }} state=directory
  register: staging_location

- name: Decompress chef-bcpc to temporary location
  unarchive: copy=no src={{ bootstrap_git_staging_dir}}/chef-bcpc-{{ chef_bcpc_version }}.zip dest={{ staging_location.path }}
  when: chef_bcpc_deploy_from_dir is not defined

- name: Move chef-bcpc contents from temporary location to deployment directory
  command: warn=false rsync -a {{ staging_location.path }}/chef-bcpc-{{ chef_bcpc_version }}/ {{ bootstrap_deployed_dir }}/
  when: chef_bcpc_deploy_from_dir is not defined

- name: Synchronize chef-bcpc deployment directory contents (chef_bcpc_deploy_from_dir is defined)
  synchronize: src={{ chef_bcpc_deploy_from_dir }}/ dest={{ bootstrap_deployed_dir }}/
  when: chef_bcpc_deploy_from_dir is defined

- name: Decompress chef-bcpc-prop to temporary location
  unarchive: copy=no src={{ bootstrap_git_staging_dir}}/chef-bcpc-prop-{{ chef_bcpc_prop_version }}.zip dest={{ staging_location.path }}
  when: chef_bcpc_prop_version is defined

- name: Overlay chef-bcpc-prop onto chef-bcpc in deployment directory
  command: warn=false rsync -a {{ staging_location.path }}/chef-bcpc-prop-{{ chef_bcpc_prop_version }}/ {{ bootstrap_deployed_dir }}/
  when: chef_bcpc_prop_version is defined

- name: Decompress additional internal cookbooks to temporary location
  unarchive: copy=no src={{ bootstrap_git_staging_dir}}/{{ item.cookbook }}-{{ item.version }}.zip dest={{ staging_location.path }}
  with_items: "{{ internal_cookbooks }}"

- name: Move additional internal cookbooks into deployment directory cookbooks
  command: mv {{ staging_location.path }}/{{ item.cookbook }}-{{ item.version }} {{ bootstrap_deployed_dir }}/cookbooks/{{ item.cookbook }}
  with_items: "{{ internal_cookbooks }}"

- name: Decompress Berks-packaged cookbooks to temporary location
  unarchive: copy=no src={{ bootstrap_git_staging_dir }}/{{ item.cookbook }}-{{ item.version }}.tar.gz dest={{ staging_location.path }}
  with_items: "{{ berks_packages|default([]) }}"

- name: Move additional Berks-packaged cookbooks into deployment directory cookbooks
  shell: mv {{ staging_location.path }}/cookbooks/* {{ bootstrap_deployed_dir }}/cookbooks/
  when: berks_packages is defined

- name: Discard temporary staging location
  file: path={{ staging_location.path }} state=absent

- name: Decompress dependency cookbooks into {{ bootstrap_deployed_dir }}
  command: tar xvzf {{ bootstrap_files_dir }}/{{ chef_bcpc_version }}/cookbooks/{{ item.cookbook }}-{{ item.version }}.tar.gz -C {{ bootstrap_deployed_dir }}/cookbooks/
  with_items: "{{ dependency_cookbooks }}"

- name: Copy named SSL keys into bcpc cookbook
  copy: src={{ controlnode_ssl_key_dir }}/{{ item }} dest={{ bootstrap_deployed_dir }}/cookbooks/bcpc/files/default/{{ item }} owner={{ ansible_ssh_user }} mode=0644 validate='openssl rsa -in %s -noout'
  with_items: "{{ ssl_key_list }}"

- name: Copy prebuilt binaries into bcpc-binary-files cookbook
  shell: cp -r {{ bootstrap_files_dir }}/{{ chef_bcpc_version }}-prebuilt/* {{ bootstrap_deployed_dir }}/cookbooks/bcpc-binary-files/files/default/
  when: use_prebuilt_binaries

- name: Check for /chef-bcpc-files
  stat: path=/chef-bcpc-files
  register: chef_bcpc_files_stat

- name: Create symlink to work around hardcoded path in shared_build_bins.sh
  file: path=/chef-bcpc-files state=link src={{ bootstrap_files_dir }}/{{ chef_bcpc_version }}
  when: not chef_bcpc_files_stat.stat.exists and not use_prebuilt_binaries

- name: Remove build_bins_cache if present before local binary build
  file: path={{ bootstrap_files_dir }}/{{ chef_bcpc_version }}/build_bins_cache state=absent
  when: not use_prebuilt_binaries

- name: Execute local binary build
  command: "{{ bootstrap_deployed_dir }}/bootstrap/shared/shared_build_bins.sh chdir={{ bootstrap_deployed_dir }}"
  when: not use_prebuilt_binaries
  environment:
    DEBIAN_FRONTEND: noninteractive
    FILECACHE_MOUNT_POINT: "{{ bootstrap_files_dir }}/{{ chef_bcpc_version }}"

- name: Fix permissions on {{ bootstrap_files_dir }}
  file: path={{ bootstrap_files_dir }} owner=operations group=operators recurse=yes

- name: Fix permissions on {{ bootstrap_deployed_dir }}
  file: path={{ bootstrap_deployed_dir }} owner=operations group=operators recurse=yes

  # tasks below here must run as operations and not root
- name: Upload cookbooks to Chef server
  command: knife cookbook upload -a
  become: no
  tags:
    - chef_upload

- name: Upload environment to Chef server
  command: knife environment from file environments/{{ cluster_name }}.json chdir={{ bootstrap_deployed_dir }}
  become: no
  tags:
    - chef_upload

- name: Upload roles to Chef server
  shell: knife role from file roles/*.json chdir={{ bootstrap_deployed_dir }}
  become: no
  tags:
    - chef_upload
