# USAGE:
# - do NOT set bcpc.enabled.apt_dist_upgrade or bcpc.enabled.apt_upgrade
#   in the Chef environment, allow this playbook to handle it
# - this playbook will orchestrate RabbitMQ/Erlang upgrades with the assumption
#   that both are being upgraded to versions that would break the RabbitMQ cluster
# - after upgrading Rabbit, Chef will be run to orchestrate cluster software upgrade
# - after Chef, dist-upgrade will be run to upgrade all remaining packages
# - use hardware_management/restart-target-nodes.yml to reboot cluster nodes in a
#   controlled fashion
---
- include: ../common_playbooks/validate_environment.yml

- hosts: bootstraps
  accelerate: true
  gather_facts: no
  vars_prompt:
    - name: "upgraded_bootstrap"
      prompt: "Please type YES to confirm you have converged the bootstrap and updated the mirror before running this playbook!"
      default: "no"
      private: no
  tasks:
  - fail: msg="Acknowledgement not received, exiting"
    when: upgraded_bootstrap != "YES"
    tags:
      - always

#################################################
# RABBITMQ UPGRADE
#################################################

# first walk through all head nodes and stop RabbitMQ on all but the VIP holder
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    # if_vip always returns 0, so need to run a command and check the output
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    # this will set vip_holder for the host that has the VIP, so effectively
    # we can use "when: vip_holder is defined" to determine if a node is
    # the VIP holder
    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Stop RabbitMQ on non-VIP holders
      command: /usr/sbin/service rabbitmq-server stop
      when: vip_holder is undefined

# now walk through head nodes again and this time stop RabbitMQ on the VIP
# holder and upgrade it
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Stop RabbitMQ on VIP holder
      command: /usr/sbin/service rabbitmq-server stop
      when: vip_holder is defined

    # ignore_errors so that the key mismatch doesn't stop the playbook
    - name: Update package lists
      command: apt-get update
      ignore_errors: true
      when: vip_holder is defined

    - name: Upgrade RabbitMQ
      command: apt-get -y install rabbitmq-server
      when: vip_holder is defined

    - name: Start RabbitMQ if it did not automatically start (no-op if running)
      command: /usr/sbin/service rabbitmq-server start
      when: vip_holder is defined

    - name: Delay for 5 seconds to allow RabbitMQ to start up nicely
      command: sleep 5
      when: vip_holder is defined

    - name: Check RabbitMQ status
      command: rabbitmqctl status
      ignore_errors: yes
      register: rabbitmqctl_status
      when: vip_holder is defined

    - fail: msg="RabbitMQ did not restart correctly on VIP holder, manual intervention required"
      when: vip_holder is defined and rabbitmqctl_status.rc != 0

      # below two commands are because Rabbit got weird during one test upgrade
    - name: Ensure RabbitMQ guest user is administrator
      command: rabbitmqctl set_user_tags guest administrator
      when: vip_holder is defined

    - name: Ensure RabbitMQ guest user has full access to / vhost
      command: rabbitmqctl set_permissions -p / guest '.*' '.*' '.*'
      when: vip_holder is defined

# now walk through head nodes a third time and upgrade remaining nodes
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    # ignore_errors so that the key mismatch doesn't stop the playbook
    - name: Update package lists
      command: apt-get update
      ignore_errors: true
      when: vip_holder is undefined

    - name: Upgrade RabbitMQ (will automatically restart)
      command: apt-get -y install rabbitmq-server
      when: vip_holder is undefined

    - name: Start RabbitMQ if it did not automatically start (no-op if running)
      command: /usr/sbin/service rabbitmq-server start
      when: vip_holder is undefined

    - name: Delay for 5 seconds to allow RabbitMQ to start up nicely
      command: sleep 5
      when: vip_holder is undefined

    - name: Check RabbitMQ status
      command: rabbitmqctl status
      ignore_errors: yes
      register: rabbitmqctl_status
      when: vip_holder is undefined

    - fail: msg="RabbitMQ did not restart correctly on non-VIP holder, manual intervention required"
      when: vip_holder is undefined and rabbitmqctl_status.rc != 0

#################################################
# ERLANG UPGRADE
#################################################

# now do the dance all over again for Erlang!

# first walk through all head nodes and stop RabbitMQ on all but the VIP holder
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    # if_vip always returns 0, so need to run a command and check the output
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    # this will set vip_holder for the host that has the VIP, so effectively
    # we can use "when: vip_holder is defined" to determine if a node is
    # the VIP holder
    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Stop RabbitMQ on non-VIP holders
      command: /usr/sbin/service rabbitmq-server stop
      when: vip_holder is undefined

# now walk through head nodes again and this time stop RabbitMQ on the VIP
# holder and upgrade Erlang
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Stop RabbitMQ on VIP holder
      command: /usr/sbin/service rabbitmq-server stop
      when: vip_holder is defined

    - name: Upgrade Erlang
      command: apt-get -y install erlang-base erlang-nox
      when: vip_holder is defined

    - name: Start RabbitMQ if it did not automatically start (no-op if running)
      command: /usr/sbin/service rabbitmq-server start
      when: vip_holder is defined

    - name: Delay for 5 seconds to allow RabbitMQ to start up nicely
      command: sleep 5
      when: vip_holder is defined

    - name: Check RabbitMQ status
      command: rabbitmqctl status
      ignore_errors: yes
      register: rabbitmqctl_status
      when: vip_holder is defined

    - fail: msg="RabbitMQ did not restart correctly on VIP holder, manual intervention required"
      when: vip_holder is defined and rabbitmqctl_status.rc != 0

      # below two commands are because Rabbit got weird during one test upgrade
    - name: Ensure RabbitMQ guest user is administrator
      command: rabbitmqctl set_user_tags guest administrator
      when: vip_holder is defined

    - name: Ensure RabbitMQ guest user has full access to / vhost
      command: rabbitmqctl set_permissions -p / guest '.*' '.*' '.*'
      when: vip_holder is defined

# now walk through head nodes a third time and upgrade remaining nodes
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Upgrade Erlang
      command: apt-get -y install erlang-base erlang-nox
      when: vip_holder is undefined

    - name: Start RabbitMQ if it did not automatically start (no-op if running)
      command: /usr/sbin/service rabbitmq-server start
      when: vip_holder is undefined

    - name: Delay for 5 seconds to allow RabbitMQ to start up nicely
      command: sleep 5
      when: vip_holder is undefined

    - name: Check RabbitMQ status
      command: rabbitmqctl status
      ignore_errors: yes
      register: rabbitmqctl_status
      when: vip_holder is undefined

    - fail: msg="RabbitMQ did not restart correctly on non-VIP holder, manual intervention required"
      when: vip_holder is undefined and rabbitmqctl_status.rc != 0

#################################################
# EVERYTHING ELSE UPGRADE
#################################################

# set Ceph noout prior to allowing Chef to run to avoid rebalance flapping while
# Ceph is upgraded on headnodes
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Set Ceph noout
      command: ceph osd set noout
      when: vip_holder is defined

# now each head node can be recheffed and have the rest of its software upgraded
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Run chef-client
      command: chef-client

    - name: Upgrade remaining packages
      shell: apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Restart Ceph monitor and OSDs
      shell: /usr/sbin/service ceph-all restart

# unset noout (reboot playbook will set it again)
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Determine if node is VIP holder
      shell: /usr/local/bin/if_vip echo 'have_vip'
      register: if_vip_output

    - set_fact: vip_holder="{{ inventory_hostname }}"
      when: if_vip_output.stdout == "have_vip"

    - name: Unset Ceph noout
      command: ceph osd unset noout
      when: vip_holder is defined

# restart OpenStack services on each node to avoid service issues in gap
# between software upgrade and restarting the head nodes
- hosts: headnodes
  accelerate: true
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: hup OpenStack services
      command: /usr/local/bin/hup_openstack

    - name: Wait 30 seconds for head node services to settle
      command: sleep 30
