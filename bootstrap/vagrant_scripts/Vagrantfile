# -*- mode: ruby -*-
# vi: set ft=ruby :

# This is a Vagrantfile to automatically provision a local BCPC cluster.

require 'openssl' # used to validate CA certificates
require 'uri' # used to parse the local mirror if one is given

Vagrant.require_version ">= 1.7.0"
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

$bootstrap_domain = ( ENV["BOOTSTRAP_DOMAIN"] or "bcpc.example.com" )
$local_mirror = ENV["BOOTSTRAP_APT_MIRROR"]
$http_proxy_server = ENV["BOOTSTRAP_HTTP_PROXY"]
$https_proxy_server = ENV["BOOTSTRAP_HTTPS_PROXY"]
$additional_cacerts_dir = ENV["BOOTSTRAP_ADDITIONAL_CACERTS_DIR"]
$box_url = "#{ENV['BOOTSTRAP_CACHE_DIR']}/trusty-server-cloudimg-amd64-vagrant-disk1.box"
$packages_to_remove = ['puppet', 'puppet-common']
$monitoring_nodes = ENV["MONITORING_NODES"].to_i

# if a directory with additional CA certs is provided, test each file in there to
# verify that it's a certificate and then add it to a script to be run inside each VM
$update_ca_certificates_script = ""
unless $additional_cacerts_dir.nil? or $additional_cacerts_dir.empty?
  files_in_cacerts_dir = Dir.entries($additional_cacerts_dir).select{|e| not ['.', '..'].include? e}
  files_in_cacerts_dir.each do |f|
    begin
      cert_raw = File.read(File.join($additional_cacerts_dir, f))
      cert = OpenSSL::X509::Certificate.new(cert_raw) # test the cert
      dest_cert_path = File.join('/usr/local/share/ca-certificates', f)
      $update_ca_certificates_script << <<-EOH
        echo -e "#{cert_raw}" > #{dest_cert_path}
      EOH
    rescue OpenSSL::X509::CertificateError
      raise "Certificate #{File.join($additional_cacerts_dir, f)} is not a valid PEM certificate, aborting."
    end
  end
end
unless $update_ca_certificates_script.empty?
  $update_ca_certificates_script << <<-EOH
    update-ca-certificates
  EOH
end

# if proxies are provided, configure them before configuring any local mirror override
# RUN THIS SCRIPT WITH sudo AND privileged = false so that $HOME is set to the
# value of the non-root user
$proxy_configuration_script = <<-EOH
  sudo touch /etc/apt/apt.conf
  touch $HOME/proxy_config.sh
EOH
unless $http_proxy_server.nil? or $http_proxy_server.empty?
  $proxy_configuration_script << <<-EOH
    echo 'Acquire::http::Proxy "http://#{$http_proxy_server}";' | sudo tee -a /etc/apt/apt.conf
    echo 'export http_proxy=#{$http_proxy_server}' | tee -a $HOME/proxy_config.sh
  EOH
end
unless $https_proxy_server.nil? or $https_proxy_server.empty?
  $proxy_configuration_script << <<-EOH
    echo 'Acquire::https::Proxy "https://#{$https_proxy_server}";' | sudo tee -a /etc/apt/apt.conf
    echo 'export https_proxy=#{$https_proxy_server}' | tee -a $HOME/proxy_config.sh
  EOH
end

# compute the repository configuration script
$repos_script = <<-EOH
  #!/bin/bash
  hash -r
  install -d -m0755 -g adm /var/log/vagrant
  exec &>>/var/log/vagrant/provision.log
  date --rfc-3339=s
EOH

unless $local_mirror.nil? or $local_mirror.empty?
  local_mirror_host = URI($local_mirror).host
  raise "#{$local_mirror} is an invalid URL, aborting build" if local_mirror_host.nil?
  $repos_script << <<-EOH
    cp /etc/apt/sources.list /etc/apt/sources.list.bak
    sed -i 's|http://archive\.ubuntu\.com/ubuntu|#{$local_mirror}|g' /etc/apt/sources.list
    sed -i 's|http://security\.ubuntu\.com/ubuntu|#{$local_mirror}|g' /etc/apt/sources.list
    sed -i s/^deb-src/\#deb-src/g /etc/apt/sources.list
    touch /etc/apt/apt.conf
    echo 'Acquire::http::Proxy::#{local_mirror_host} "DIRECT";' | tee -a /etc/apt/apt.conf
  EOH
end

# try to apt-get update immediately so that the bootstrap does not wander along for a while
# and waste everyone's time in case our repo configuration set above is broken
$repos_script << <<-EOH
  apt-get update
EOH
# END repository configuration script

# since these boxes do not come with swap, this script will add a swap file on disk
# (repartionining /dev/sda would be a dreadful chore)
$add_swap_script = <<-EOH
  #!/bin/bash
  fallocate -l 8192M /swap
  chmod 600 /swap
  mkswap /swap
  swapon /swap
  echo '/swap none swap defaults 0 0' | tee -a /etc/fstab
EOH

at_exit do
  raise $! unless $!.success?
  # put anything that should happen on successful provisioning below here
end

Vagrant.configure("2") do |config|
  # configure bootstrap node
  config.vm.define "bootstrap" do |machine|
    machine.vm.hostname = "bcpc-bootstrap.#{$bootstrap_domain}"

    machine.vm.network :private_network, ip: "10.0.100.3", netmask: "255.255.255.0", adapter_ip: "10.0.100.2"
    machine.vm.network :private_network, ip: "172.16.100.3", netmask: "255.255.255.0", adapter_ip: "172.16.100.2"
    machine.vm.network :private_network, ip: "192.168.100.3", netmask: "255.255.255.0", adapter_ip: "192.168.100.2"

    machine.vm.synced_folder(ENV['REPO_ROOT'], "/chef-bcpc-host") unless ENV['REPO_ROOT'].nil?
    machine.vm.synced_folder(ENV['BOOTSTRAP_CACHE_DIR'], "/chef-bcpc-files") unless ENV['BOOTSTRAP_CACHE_DIR'].nil?
    machine.vm.synced_folder ".", "/vagrant", disabled: true

    # fix no-tty error
    machine.vm.provision "fix-no-tty", type: "shell" do |s|
      s.privileged = false
      s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
    end
    
    # configure extra CA certificates
    machine.vm.provision "configure-ca-certificates", type: "shell" do |s|
      s.inline = $update_ca_certificates_script
    end
    
    # configure proxy servers (do not run as root)
    machine.vm.provision "configure-proxy-servers", type: "shell" do |s|
      s.privileged = false
      s.inline = $proxy_configuration_script
    end

    # set up repositories
    machine.vm.provision "configure-repositories", type: "shell" do |s|
      s.inline = $repos_script
    end
    
    # configure a hostfile entry with the IP of the bootstrap node (for Chef)
    machine.vm.provision "configure-bootstrap-hostfile-entry", type: "shell" do |s|
      s.inline = "echo -e '10.0.100.3\tbcpc-bootstrap.#{$bootstrap_domain}\n' >> /etc/hosts"
    end
    
    # clean up some packages installed in this image by default
    machine.vm.provision "clean-up-unnecessary-packages", type: "shell" do |s|
      s.inline = "apt-get remove -y #{$packages_to_remove.join(' ')}"
    end
    
    # add swap space
    machine.vm.provision "add-swap-space", type: "shell" do |s|
      s.inline = $add_swap_script
    end
    
    machine.vm.box = "trusty64"
    machine.vm.box_url = $box_url

    memory = ( ENV["BOOTSTRAP_VM_MEM"] or "2048" )
    cpus = ( ENV["BOOTSTRAP_VM_CPUS"] or "1" )
    vram = ( ENV["BOOTSTRAP_VM_VRAM"] or "16" )

    machine.vm.provider :virtualbox do |vb|
      vb.name = "bcpc-bootstrap"
      vb.customize ["modifyvm", :id, "--nictype2", "82543GC"]
      vb.customize ["modifyvm", :id, "--memory", memory]
      vb.customize ["modifyvm", :id, "--vram", vram]
      vb.customize ["modifyvm", :id, "--cpus", cpus]
      vb.customize ["modifyvm", :id, "--largepages", "on"]
      vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
      vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
      vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
      vb.customize ["modifyvm", :id, "--ioapic", "on"]
    end
  end # bootstrap node
  
  $cluster_nodes = 3
  unless $monitoring_nodes.nil? or $monitoring_nodes == 0
    if (1..3).include?($monitoring_nodes)
      $cluster_nodes += $monitoring_nodes
    else
      raise "Invalid number of monitoring nodes specified"
    end
  end

  # configure cluster nodes
  (1..$cluster_nodes).each do |i|
    config.vm.define "vm#{i}" do |machine|
      machine.vm.hostname = "bcpc-vm#{i}.#{$bootstrap_domain}"

      machine.vm.network :private_network, ip: "10.0.100.#{10+i}", netmask: "255.255.255.0", adapter_ip: "10.0.100.2"
      machine.vm.network :private_network, ip: "172.16.100.#{10+i}", netmask: "255.255.255.0", adapter_ip: "172.16.100.2"
      machine.vm.network :private_network, ip: "192.168.100.#{10+i}", netmask: "255.255.255.0", adapter_ip: "192.168.100.2"
      
      machine.vm.synced_folder(ENV['REPO_ROOT'], "/chef-bcpc-host") unless ENV['REPO_ROOT'].nil?
      machine.vm.synced_folder(ENV['BOOTSTRAP_CACHE_DIR'], "/chef-bcpc-files") unless ENV['BOOTSTRAP_CACHE_DIR'].nil?
      machine.vm.synced_folder ".", "/vagrant", disabled: true
      
      # fix no-tty error
      machine.vm.provision "fix-no-tty", type: "shell" do |s|
        s.privileged = false
        s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
      end
    
      # configure extra CA certificates
      machine.vm.provision "configure-ca-certificates", type: "shell" do |s|
        s.inline = $update_ca_certificates_script
      end
          
      # configure proxy servers (do not run as root)
      machine.vm.provision "configure-proxy-servers", type: "shell" do |s|
        s.privileged = false
        s.inline = $proxy_configuration_script
      end

      # set up repositories
      machine.vm.provision "configure-repositories", type: "shell" do |s|
        s.inline = $repos_script
      end
      
      # configure a hostfile entry with the IP of the bootstrap node (for Chef)
      machine.vm.provision "configure-bootstrap-hostfile-entry", type: "shell" do |s|
        s.inline = "echo -e '10.0.100.3\tbcpc-bootstrap.#{$bootstrap_domain}\n' >> /etc/hosts"
      end
      
      # clean up some packages installed in this image by default
      machine.vm.provision "clean-up-unnecessary-packages", type: "shell" do |s|
        s.inline = "apt-get remove -y #{$packages_to_remove.join(' ')}"
      end
      
      # add swap space
      machine.vm.provision "add-swap-space", type: "shell" do |s|
        s.inline = $add_swap_script
      end

      machine.vm.box = "trusty64"
      machine.vm.box_url = $box_url

      memory = ( ENV["CLUSTER_VM_MEM"] or "2560" )
      cpus = ( ENV["CLUSTER_VM_CPUS"] or "2" )
      vram = ( ENV["CLUSTER_VM_VRAM"] or "16" )
      disk_size = ( ENV["CLUSTER_VM_DRIVE_SIZE"] or "20480" )

      machine.vm.provider :virtualbox do |vb|
        vm_name = "bcpc-vm#{i}"
        vb.name = vm_name
        vb.memory = memory
        vb.cpus = cpus
        
        vb.customize ["modifyvm", :id, "--nictype2", "82543GC"]
        vb.customize ["modifyvm", :id, "--vram", vram]
        vb.customize ["modifyvm", :id, "--largepages", "on"]
        vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
        vb.customize ["modifyvm", :id, "--vtxvpid", "on"]
        vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
        vb.customize ["modifyvm", :id, "--ioapic", "on"]
        
        # this is an unpleasing hack to locate the VM on disk, so that additional disks can be stored with it
        # this assumes that all VMs will be going into the default VirtualBox folder
        begin
          default_vm_config_file = %x[VBoxManage list systemproperties | grep 'Default machine folder']
          default_vm_loc = default_vm_config_file.match(/^Default machine folder:\s+(.+)$/)[1]
          vm_dir = File.join(default_vm_loc, vm_name)
        rescue
          fail "Unable to locate VM #{vm_name} on disk, terminating"
        end        

        disk_range = case i; when 1 then ('b'..'h'); when 2..3 then ('b'..'e'); else []; end
        disk_range.each_with_index do |disk, idx|
          disk_file = File.join(vm_dir, "vm#{i}-#{disk}.vdi")
          unless File.exist?(disk_file)
            vb.customize ["createhd", "--filename", disk_file, "--size", disk_size]
            vb.customize ["storageattach", :id, "--storagectl", "SATAController", "--device", "0", "--port", "#{idx+1}", "--type", "hdd", "--medium", disk_file]
          end # File.exist
        end # b..e each
      end # machine.vm.provider
    end # config.vm.define
  end # 1..$cluster_nodes each
end
