- name: Download chef-client package
  copy:
    src: "{{ assets_download_dir }}/{{ chef_client_package.filename }}"
    dest: "/var/tmp/{{ chef_client_package.filename }}"
    mode: '0644'

- name: Install chef-client package
  apt:
    deb: "/var/tmp/{{ chef_client_package.filename }}"

# https://github.com/chef/ohai/issues/1791
- name: Replace cpu.rb to account for changes in /proc/cpuinfo
  copy:
    src: ohai/cpu.rb
    dest: /opt/cinc/embedded/lib/ruby/gems/2.6.0/gems/ohai-15.6.3/lib/ohai/plugins/cpu.rb
    mode: '0664'

# https://github.com/chef/ohai/issues/1414
# https://github.com/chef/ohai/pull/1423
- name: Replace dmi.rb to account for Ohai::Common::DMI.convenience_keys() fix
  copy:
    src: ohai/dmi.rb
    dest: /opt/cinc/embedded/lib/ruby/gems/2.6.0/gems/ohai-15.6.3/lib/ohai/common/dmi.rb
    mode: '0664'

- name: Create /etc/chef directory
  file:
    path: /etc/chef
    state: directory
    mode: '0755'

- name: Link /etc/cinc to /etc/chef
  file:
    src: chef
    dest: /etc/cinc
    state: link

- name: Create /var/chef directory
  file:
    path: /var/chef
    state: directory
    mode: '0755'

- name: Link /var/cinc to /var/chef
  file:
    src: chef
    dest: /var/cinc
    state: link

- name: Get contents of Chef validation key
  slurp:
    src: '{{ chef_org_validator_pem }}'
  register: chef_validation_key
  delegate_to: "{{ chef_server_host }}"

- name: Install Chef validation key
  copy:
    dest: "{{ chef_org_validator_pem }}"
    content: "{{ chef_validation_key['content'] | b64decode }}"
    mode: '0644'

- name: Create trusted certs directory
  file:
    path: /etc/chef/trusted_certs
    state: directory
    recurse: true

- name: Get Chef server SSL certificate
  slurp:
    src: '{{ src }}'
  vars:
    filename: '{{ chef_server_fqdn | replace(".", "_") }}.crt'
    src: '/etc/chef/trusted_certs/{{ filename }}'
  register: chef_server_ssl_crt
  delegate_to: "{{ chef_server_host }}"

- name: Install Chef server SSL certificate
  copy:
    dest: '{{ dest }}'
    content: "{{ chef_server_ssl_crt['content'] | b64decode }}"
    mode: '0644'
  vars:
    filename: '{{ chef_server_fqdn | replace(".", "_") }}.crt'
    dest: '/etc/chef/trusted_certs/{{ filename }}'

- name: Create Chef client log directory
  file:
    path: /var/log/chef
    state: directory
    recurse: true

- name: Install client.rb
  template:
    src: client.rb.j2
    dest: /etc/chef/client.rb
    mode: '0644'

- name: Check if registered
  become: false
  command: knife node show "{{ node_fqdn }}"
  register: node_registered_check
  failed_when: node_registered_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: Register with Chef server
  when: node_registered_check is failed
  command: chef-client
  changed_when: true

- name: Check node environment
  become: false
  shell: knife node show -E "{{ node_fqdn }}" | grep "{{ cloud_region }}"
  register: node_env_check
  failed_when: node_env_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: Set environment
  when: node_env_check is failed
  become: false
  command: |
    knife node environment set "{{ node_fqdn }}" "{{ cloud_region }}"
  delegate_to: "{{ chef_server_host }}"
  changed_when: true

- name: Check node runlist
  become: false
  shell: knife node show -r "{{ node_fqdn }}" | grep role
  register: node_runlist_check
  failed_when: node_runlist_check.rc != 0
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ chef_server_host }}"

- name: Set run list
  when: node_runlist_check is failed
  become: false
  command: knife node run_list add "{{ node_fqdn }}" "{{ node_runlist }}"
  delegate_to: "{{ chef_server_host }}"
  changed_when: true

- name: Capture node details
  become: false
  command: knife node show "{{ node_fqdn }}" --long --format json
  register: node_details_raw
  changed_when: false
  delegate_to: "{{ chef_server_host }}"
  no_log: true

- name: Define node_details
  set_fact:
    node_details: >
      {{
        node_details_raw.stdout |
        from_json |
        update_chef_node_host_vars(hostvars[inventory_hostname])
      }}
  no_log: true

- name: Write node_details to file
  copy:
    content: "{{ node_details | to_nice_json }}"
    dest: "{{ node_fqdn }}.json"
    mode: '0644'
  delegate_to: "{{ chef_server_host }}"
  no_log: true

- name: Import node changes
  command: knife node from file "{{ node_fqdn }}.json"
  delegate_to: "{{ chef_server_host }}"
  changed_when: false
