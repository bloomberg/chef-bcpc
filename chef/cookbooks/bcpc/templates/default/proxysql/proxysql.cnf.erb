###############################################################################
#                           generated by chef
###############################################################################

# This file contains various ProxySQL configuration options. Commented options
# have their default values specified.

###
### General Variables
###

# NOTE: All changes to general variables are applied only after a service
# restart.

# Defines the path of the ProxySQL datadir, where the database file, the logs
# and other files are stored.
datadir="<%= node['bcpc']['proxysql']['datadir'] %>"

# If MySQL threads miss restart_on_missing_heartbeats heartbeats, ProxySQL will
# raise a SIGABRT signal and restart.
restart_on_missing_heartbeats=<%= node['bcpc']['proxysql']['restart_on_missing_heartbeats'] %>

# If set, the ProxySQL parent process will execute the defined script every
# time ProxySQL crashes. It is recommended to use this setting to generate an
# alert or log the event. Note that ProxySQL is able to restart in a few
# milliseconds in case of a crash, therefore it is possible that a normal
# failure is not detected by other monitoring tools.
execute_on_exit_failure="<%= node['bcpc']['proxysql']['execute_on_exit_failure'] %>"

# If set, ProxySQL will use the defined file as its error-log. In case such a
# variable is not passed, the error-log will be located in
# datadir/proxysql.log.
errorlog="<%= node['bcpc']['proxysql']['errorlog'] %>"

###
### Global Variables
###

# NOTE: For a full list of options see
# https://proxysql.com/documentation/global-variables/

admin_variables=
{
    # This is a list of semi-colon separated user:password pairs, that can be
    # used to authenticate to the admin interface with read-write rights.
    #
    # NOTE: The default 'admin' user cannot be used remotely.
    # NOTE: Users in admin-admin_credentials cannot be used in the mysql_users
    # table.
    admin_credentials="<%= @creds['admin']['username'] %>:<%= @creds['admin']['password'] %>"

    # Semicolon-separated list of hostname:port entries for interfaces on which
    # the admin interface should listen on.
    mysql_ifaces="0.0.0.0:<%= node['bcpc']['proxysql']['admin_port'] %>"

    # Whether or not user passwords are hashed at runtime.
    #hash_password=true

    # Whether or not configuration changes can be made via the admin interface.
    read_only=<%= node['bcpc']['proxysql']['read_only'] %>

    # The refresh interval (in microseconds) for updates to the query rules
    # statistics and commands counters statistics.
    refresh_interval=<%= node['bcpc']['proxysql']['refresh_interval'] %>

    # Whether or not to allow users to create new REST-API endpoints and
    # execute scripts on behalf of ProxySQL.
    restapi_enabled=<%= node['bcpc']['proxysql']['restapi_enabled'] %>

    # The port on which the enabled REST-API should listen on.
    restapi_port=<%= node['bcpc']['proxysql']['restapi_port'] %>

    # Whether or not to enable the built-in web interface
    web_enabled=<%= node['bcpc']['proxysql']['web_enabled'] %>

    # The port on which the web interface may be accessed
    web_port=<%= node['bcpc']['proxysql']['web_port'] %>

    # A list of semi-colon separated user:password pairs that define the
    # read-only credentials for connecting to the admin interface. These are
    # not allowed updates to internal data structures such as the list of MySQL
    # backend servers (or hostgroups), query rules, etc. Only the statistics
    # and monitoring tables are accessable.
    stats_credentials="<%= @creds['stats']['username'] %>:<%= @creds['stats']['password'] %>"

    #stats_mysql_connection_pool=60
    #stats_mysql_connections=60
    #stats_mysql_query_cache=60
    #stats_system_cpu=60
    #stats_system_memory=60
    #vacuum_stats=true

    ############################## Cluster Related #############################

    # Username used to connect to other cluster members
    cluster_username="<%= @creds['admin']['username'] %>"

    # Password used to connect to other cluster members
    cluster_password="<%= @creds['admin']['password'] %>"

    # Checksum-check frequency
    cluster_check_interval_ms=<%= node['bcpc']['proxysql']['cluster_check_interval_ms'] %>

    # After how many checksum checks should a status check be performed
    #cluster_check_status_frequency=10

    # What to sync
    #checksum_mysql_query_rules=true
    # NOTE: Do not sync servers in order to preserve custom weights
    checksum_mysql_servers=false
    #checksum_mysql_users=true

    # Whether or not to save sync-ed value to disk
    #cluster_mysql_query_rules_save_to_disk=true
    #cluster_mysql_servers_save_to_disk=true
    #cluster_mysql_users_save_to_disk=true
    #cluster_proxysql_servers_save_to_disk=true

    # How many mis-matching checks trigger a syncronization
    cluster_mysql_query_rules_diffs_before_sync=<%= node['bcpc']['proxysql']['cluster_diffs_before_sync'] %>
    cluster_mysql_servers_diffs_before_sync=<%= node['bcpc']['proxysql']['cluster_diffs_before_sync'] %>
    cluster_mysql_users_diffs_before_sync=<%= node['bcpc']['proxysql']['cluster_diffs_before_sync'] %>
    cluster_proxysql_servers_diffs_before_sync=<%= node['bcpc']['proxysql']['cluster_diffs_before_sync'] %>
}

mysql_variables=
{

    # The number of background threads that ProxySQL uses in order to process
    # MySQL traffic.
    # NOTE: Changes require a restart
    threads=<%= node['bcpc']['proxysql']['threads'] %>

    # The stack size of the background threads described above.
    # NOTE: Changes require a restart
    stacksize=<%= node['bcpc']['proxysql']['stacksize'] %>

    ############################ Client Related ###############################

    # Semicolon-separated list of hostname:port entries for interfaces for
    # incoming MySQL traffic.
    # NOTE: Changes require a restart
    interfaces="0.0.0.0:<%= node['bcpc']['proxysql']['port'] %>"

    # The maximum number of client connections that the proxy can handle. After
    # this number is reached, new connections will be rejected with the #HY000
    # error, and the error message Too many connections.
    max_connections=<%= node['bcpc']['proxysql']['max_connections'] %>

    # Whether to enable or disable frontend SSL support.
    have_ssl=<%= node['bcpc']['proxysql']['have_ssl'] %>

    # The default server charset to be used in the communication with the MySQL
    # clients. Note that this is the default for client connections, not for
    # backend connections.
    #default_charset=utf8

    # The default schema to be used for incoming MySQL client connections which
    # do not specify a schema name. This is required because ProxySQL doesn’t
    # allow connection without a schema.
    #default_schema=information_schema

    # When enabled the backend connection for a client connection is killed
    # when the client disconnects
    #kill_backend_connection_when_disconnect=true

    # When active ProxySQL will send KeepAlive signal during the client open
    # session.
    use_tcp_keepalive=<%= node['bcpc']['proxysql']['use_tcp_keepalive'] %>

    # If a proxy session (which is a conversation between a MySQL client and a
    # ProxySQL) has been idle for more than this threshold, the proxy will kill
    # the session.
    wait_timeout=<%= node['bcpc']['proxysql']['wait_timeout'] %>

    ############################ Backend Related ##############################

    # The bitmask of MySQL capabilities (encoded as bits) with which the proxy
    # will respond to clients connecting to it.
    server_capabilities=<%= node['bcpc']['proxysql']['server_capabilities'] %>

    # Whether or not to allow multiple frontend connections to re-use the same
    # database backend connection.
    multiplexing=<%= node['bcpc']['proxysql']['multiplexing'] %>

    # The delay (in milliseconds) before trying to reconnect after a failed
    # attempt to a backend MySQL server.
    #connect_retries_delay=1

    # The number of times for which a reconnect should be attempted in case of
    # an error, timeout, or any other event that led to an unsuccessful
    # connection to a backend MySQL server.
    #connect_retries_on_failure=10

    # The timeout (in milliseconds) for a single attempt at connecting to a
    # backend server from the proxy.
    #connect_timeout_server=1000

    # The timeout for connecting to a backend server from the proxy. When this
    # timeout is reached, an error is returned to the client with code 9001 and
    # the message “Max connect timeout reached while reaching hostgroup…”.
    #connect_timeout_server_max=10000

    # Percentage of open idle connections allowed from the total maximum number
    # of connections for a specific server in a hostgroup.
    free_connections_pct=<%= node['bcpc']['proxysql']['free_connections_pct'] %>

    ######################## Logging and Stats Related ########################

    # If a client disconnects in a not graceful way and if is enabled
    # (default), ProxySQL will log a warning Closing unhealthy client
    # connection IP:port.
    #log_unhealthy_connections=true

    # Threshold for counting queries passing through the proxy as ‘slow’.
    long_query_time=<%= node['bcpc']['proxysql']['long_query_time'] %>

    #Defines the base name of the audit log where audit events are logged.
    #auditlog_filename=NULL

    # Defines the maximum file size of the audit log when the current file will
    # be closed and a new file will be created. (bytes)
    #auditlog_filesize=104857600

    # Enable per-command MySQL query statistics. A command is a type of SQL
    # query that is being executed.
    #commands_stats=true

    # If this variable is set, ProxySQL will log all traffic to the specified
    # filename.
    #eventslog_filename=(empty string, not set)

    # Max event log filesize (bytes) before it is rotated.
    #eventslog_filesize=104857600

    # ProxySQL is able to log queries that pass through. If there is no
    # definition for Log in a matching rule in mysql_query_rules,
    # mysql-eventslog_default_log applies.
    #eventslog_default_log=false

    #eventslog_format=1

    # Enables / disables collection of backend query CPU time statistics.
    stats_time_backend_query=true

    # Enables / disables collection of query processor CPU time statistics.
    stats_time_query_processor=false

    ############################## Query Related ##############################

    # Maximal duration of a query (24 hours)
    default_query_timeout=<%= node['bcpc']['proxysql']['default_query_timeout'] %>

    # Sessions with active transactions running more than this timeout are
    # killed. Default is 4 hours.
    max_transaction_time=<%= node['bcpc']['proxysql']['max_transaction_time'] %>

    # In case of failures while running a query, the same can be retried
    # mysql-query_retries_on_failure times.
    query_retries_on_failure=<%= node['bcpc']['proxysql']['query_retries_on_failure'] %>

    ############################# Monitor Related #############################

    # Enable or disable MySQL Monitor
    #monitor_enabled=true

    # Specifies the username that the Monitor module will use to connect to the
    # backends.
    monitor_username="<%= @creds['db']['username'] %>"

    # Specifies the password that the Monitor module will use to connect to the
    # backends.
    monitor_password="<%= @creds['db']['password'] %>"

    # The interval at which the Monitor module of the proxy will try to connect
    # to all the MySQL servers in order to check whether they are available or
    # not. Default is 2 min.
    #monitor_connect_interval=120000

    # The interval at which the proxy should connect to the backend servers in
    # order to monitor the Galera status of a node. Nodes can be temporarily
    # shunned if their status is not available which is controlled by the
    # mysql_galera_hostgroups.max_transactions_behind column in the admin
    # interface, at a per-hostgroup level (milliseconds).
    #monitor_galera_healthcheck_interval=5000

    # How long the Monitor module will wait for a Galera status check reply
    # (milliseconds).
    #monitor_galera_healthcheck_timeout=800

    # Set the max number of times ProxySQL has to timeout while checking on a
    # Galera Node before declaring it OFFLINE.
    #monitor_galera_healthcheck_max_timeout_count=3

    # The duration for which the events for the checks made by the Monitor
    # module are kept (milliseconds).
    #monitor_history=600000

    ########################### Query Cache Related ###########################

    # The total amount of memory used by the Query Cache, note: the current
    # implementation of mysql-query_cache_size_MB doesn’t impose a hard limit.
    # Instead, it is used as an argument by the purging thread.
    #query_cache_size_MB=256

    # Set if resultset without rows will be cached or not.
    #query_cache_stores_empty_result=true

    # When this variable is set to true, the proxy analyzes the queries passing
    # through it and divides them into classes of queries having different
    # values for the same parameters. It computes a couple of metrics for these
    # classes of queries, all found in the stats_mysql_query_digest table.
    #query_digests=true
}

###
### Hostgroup Definitions for the Galera Cluster
###

# See https://proxysql.com/documentation/galera-configuration/ for more
# information.

mysql_galera_hostgroups =
(
    {
        writer_hostgroup=1
        backup_writer_hostgroup=2
        reader_hostgroup=3
        offline_hostgroup=4
        active=<%= node['bcpc']['proxysql']['galera']['active'] %>
        max_writers=<%= node['bcpc']['proxysql']['galera']['max_writers'] %>
        writer_is_also_reader=<%= node['bcpc']['proxysql']['galera']['writer_is_also_reader'] %>
        max_transactions_behind=<%= node['bcpc']['proxysql']['galera']['max_transactions_behind'] %>
    }
)

###
### Server Definitions
###

# See https://proxysql.com/documentation/main-runtime/#mysql_servers for more
# information.

mysql_servers =
(
<% @headnodes.each do |n| %>
    {
<% if n['service_ip'] == node['service_ip'] %>
        hostgroup=1
        weight=<%= @backend['local_weight'] %>
<% else %>
        hostgroup=2
        weight=<%= @backend['remote_weight'] %>
<% end %>
        address="<%= n['service_ip'] %>"
        port=<%= @backend['port'] %>
        compression=<%= @backend['compression'] %>
        max_connections=<%= @backend['max_connections'] %>
        max_replication_lag=<%= @backend['max_replication_lag'] %>
        use_ssl=<%= @backend['use_ssl'] %>
        max_latency_ms=<%= @backend['max_latency_ms'] %>
        comment="<%= n['hostname'] %>"
    },
<% end %>
)

###
### User Definitions
###

# See https://proxysql.com/documentation/main-runtime/#mysql_users for more
# information.

mysql_users =
(
<% @mysql_users.each do |u| %>
    {
        username="<%= u[0] %>"
        password="<%= u[1]['password'] %>"
        active=1
        use_ssl=<%= node['bcpc']['proxysql']['mysql_users']['use_ssl'] %>
        default_hostgroup=1
        schema_locked=0
        transaction_persistent=<%= node['bcpc']['proxysql']['mysql_users']['transaction_persistent'] %>
        fast_forward=<%= node['bcpc']['proxysql']['mysql_users']['fast_forward'] %>
        backend=1
        frontend=1
        max_connections=<%= node['bcpc']['proxysql']['mysql_users']['max_connections'] %>
        comment=""
    },
<% end %>
)

###
### ProxySQL Cluster Definitions
###

# See https://proxysql.com/documentation/Proxysql-Cluster/ for more
# information.

proxysql_servers =
(
    {
        hostname="<%= node['service_ip'] %>"
        port=<%= node['bcpc']['proxysql']['admin_port'] %>
        weight=0
        comment="<%= node['hostname'] %>"
    },
)

###
### Query Rules
###

# See https://proxysql.com/documentation/main-runtime/#mysql_query_rules for
# more information.

mysql_query_rules =
(
<% if !@query_rules.nil? %>
  <% @query_rules.each do |r| %>
    {
    <% r[1].each do |p| %>
        <%= p[0] %>=<%= p[1] %>
    <% end %>
    },
  <% end %>
<% end %>
)
