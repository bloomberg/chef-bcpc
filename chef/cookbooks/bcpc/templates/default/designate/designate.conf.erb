[DEFAULT]

debug = <%= node['bcpc']['designate']['debug'] %>

# Name of this node (string value)
host = <%= node['hostname'] %>

# TTL Value (integer value)
#default_ttl = 3600

# SOA refresh-min value (integer value)
# Deprecated group/name - [DEFAULT]/default_soa_refresh
#default_soa_refresh_min = 3500

# SOA max value (integer value)
#default_soa_refresh_max = 3600

# SOA retry (integer value)
#default_soa_retry = 600

# SOA expire (integer value)
#default_soa_expire = 86400

# SOA minimum value (integer value)
#default_soa_minimum = 3600

# Supported record types (list value)
#supported_record_type = A,AAAA,CNAME,MX,SRV,TXT,SPF,NS,PTR,SSHFP,SOA

# Which API to use. (string value)
#network_api = neutron

# Send notifications if there's a failure in the API. (boolean value)
#notify_api_faults = false

# The notification plugin to use (string value)
#notification_plugin = default

# Quota driver to use (string value)
#quota_driver = storage

# Number of zones allowed per tenant (integer value)
#quota_zones = 10

# Number of recordsets allowed per zone (integer value)
#quota_zone_recordsets = 500

# Number of records allowed per zone (integer value)
#quota_zone_records = 500

# Number of records allowed per recordset (integer value)
#quota_recordset_records = 20

# Number of recordsets allowed in a zone export (integer value)
#quota_api_export_size = 1000

# Timeout in seconds for XFR's. (integer value)
#xfr_timeout = 10

transport_url = rabbit://<%= @headnodes.map{|n| "#{@config['rabbit']['username']}:#{@config['rabbit']['password']}@#{n['ipaddress']}:5672" }.join(',') %>

[coordination]

# The backend URL to use for distributed coordination. If unset services that
# need coordination will function as a standalone service. This is a `tooz` url
# - see https://docs.openstack.org/tooz/latest/user/compatibility.html (string
# value)
backend_url = memcached://<%= node['ipaddress'] %>:11211

[database]

connection = <%= "mysql+pymysql://#{@db['username']}:#{@db['password']}@#{node['bcpc']['mysql']['host']}/#{@db['dbname']}" %>

[keystone_authtoken]

auth_type = password
username = <%= @os['username'] %>
password = <%= @os['password'] %>
project_name = service
project_domain_name = Default
user_domain_name = Default
region_name = <%= node['bcpc']['cloud']['region'] %>
www_authenticate_uri = <%= "https://#{@node['bcpc']['cloud']['fqdn']}:5000/" %>
auth_url = <%= "https://#{@node['bcpc']['cloud']['fqdn']}:35357/" %>
memcached_servers = <%= @headnodes.map{ |n| "#{n['ipaddress']}:11211" }.join(',') %>

[pool_manager_cache:memcache]

#
# From designate.opts
#

# Time in seconds to expire cache. (integer value)
#expiration = 3600

# Memcached servers or None for in process cache. (list value)
#memcached_servers = <None>

[service:agent]

# Agent host:port pairs to listen on (list value)
listen = <%= node['ipaddress'] %>:5358

# The Agent TCP Backlog (integer value)
#tcp_backlog = 100

# Agent TCP Receive Timeout (floating point value)
#tcp_recv_timeout = 0.5

# List of IP addresses allowed to NOTIFY The Agent (list value)
#allow_notify =

# List of masters for the Agent, format ip:port (list value)
#masters =

# The backend driver to use, e.g. bind9, djbdns, knot2 (string value)
#backend_driver = bind9

# An IP address to be used to fetch zones transferred in (string value)
#transfer_source = <None>

# Delay after a NOTIFY arrives for a zone that the Agent will pause and drop
# subsequent NOTIFYs for that zone (floating point value)
#notify_delay = 0.0

[service:api]

# API host:port pairs to listen on (list value)
listen = <%= node['ipaddress'] %>:9001

# the url used as the base for all API responses,This should consist of the
# scheme (http/https),the hostname, port, and any paths that are addedto the
# base of Designate is URLs,For example http://dns.openstack.example.com/dns
# (string value)
api_base_uri = https://<%= node["bcpc"]['cloud']["fqdn"]%>:9001/

# The strategy to use for auth. Supports noauth or keystone (string value)
auth_strategy = keystone

# enable-api-v2 which enable in a future (boolean value)
enable_api_v2 = true

# Enabled API Extensions for the V2 API (list value)
enabled_extensions_v2 = quotas, reports

# The HTTP Header that will be used to determine which the original request
# protocol scheme was, even if it was removed by an SSL terminating proxy.
# (string value)
secure_proxy_ssl_header = X-Forwarded-Proto

# Default per-page limit for the V2 API, a value of None means show all results
# by default (integer value)
#default_limit_v2 = 20

# Max per-page limit for the V2 API (integer value)
#max_limit_v2 = 1000

# Enabled Admin API Extensions (list value)
#enabled_extensions_admin =

# Default per-page limit for the Admin API, a value of None means show all
# results by default (integer value)
#default_limit_admin = 20

# Max per-page limit for the Admin API (integer value)
#max_limit_admin = 1000

# Enable API Maintenance Mode (boolean value)
#maintenance_mode = false

# Role allowed to bypass maintaince mode (string value)
#maintenance_mode_role = admin


# A scheme that will be used to override the request protocol scheme, even if it
# was set by an SSL terminating proxy. (string value)
#override_proto = <None>


[service:central]

# The storage driver to use (string value)
#storage_driver = sqlalchemy

# Enabled Notification Handlers (list value)
#enabled_notification_handlers =

# Maximum zone name length (integer value)
#max_zone_name_len = 255

# Maximum recordset name length (integer value)
# Deprecated group/name - [service:central]/max_record_name_len
#max_recordset_name_len = 255

# E-Mail for Managed resources (string value)
#managed_resource_email = hostmaster@example.com

# The Tenant ID that will own any managed resources. (string value)
#managed_resource_tenant_id = 00000000-0000-0000-0000-000000000000

# Minimum TTL allowed (integer value)
#min_ttl = <None>

# RPC topic name of central service. (string value)
#central_topic = central

#
# From designate.opts
#

# Enabled Pool Scheduling filters (list value)
#scheduler_filters = default_pool

[service:mdns]

# mDNS host:port pairs to listen on (list value)
listen = <%= node['ipaddress'] %>:5354

[service:pool_manager]

# The flag for the recovery timer (boolean value)
#enable_recovery_timer = true

# The time between recovering from failures (integer value)
#periodic_recovery_interval = 120

# The flag for the sync timer (boolean value)
#enable_sync_timer = true

# The time between synchronizing the servers with storage (integer value)
#periodic_sync_interval = 1800

# Zones Updated within last N seconds will be syncd.Use an empty value to sync
# all zones. (integer value)
#periodic_sync_seconds = 21600

# Number of attempts to update a zone during sync (integer value)
#periodic_sync_max_attempts = 3

# Interval between zone update attempts during sync (integer value)
#periodic_sync_retry_interval = 30

# The cache driver to use (string value)
#cache_driver = memcache

# RPC topic name for pool-manager (string value)
#pool_manager_topic = pool_manager


[service:producer]

# Enabled tasks to run (list value)
#enabled_tasks = <None>

# The storage driver to use (string value)
#storage_driver = sqlalchemy

[service:worker]

enabled = True
notify = true

[storage:sqlalchemy]

connection = <%= "mysql+pymysql://#{@db['username']}:#{@db['password']}@#{node['bcpc']['mysql']['host']}/#{@db['dbname']}" %>
