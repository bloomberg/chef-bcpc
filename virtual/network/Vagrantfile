# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright:: 2019 Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

base_box = 'bento/ubuntu-18.04'
base_box_version = '201812.27.0'


def setup_proxy(node)
  http_proxy  = ENV['http_proxy']  || ''
  https_proxy = ENV['https_proxy'] || ''
  return unless http_proxy != ''
  node.vm.provision 'shell', path: 'proxyconfig.sh',
                             args: [http_proxy, https_proxy]
end

# load util module
util_path = '../lib/util.rb'
if File.file?(File.expand_path(util_path))
  require File.expand_path(util_path)
else
  raise "#{util_path} not found"
end

Vagrant.configure(2) do |config|
  if ENV['DEPLOY_NETWORK_VM'] == 'true'

    config.vm.define 'network' do |node|
      config.vm.provider 'virtualbox' do |vb|
        vb.name = 'network'
        vb.memory = 512
      end
      node.vm.hostname = 'network'
      node.vm.box = base_box
      config.vm.box_version = base_box_version
      node.vm.box_download_insecure = true
      Util.mount_apt_cache(node)
      node.vm.network('private_network', Util.privnet_args('management1'))
      node.vm.network('private_network', Util.privnet_args('management2'))
      node.vm.network('private_network', Util.privnet_args('management3'))
      setup_proxy(node)
      node.vm.provision 'shell', path: 'provisioner.sh', args: 'network'
    end

  else

    # Create 3 TORs
    (1..3).each do |i|
      config.vm.define "tor#{i}" do |node|
        node.vm.provider 'virtualbox' do |vb|
          vb.name = "tor#{i}"
          vb.memory = 512
        end
        node.vm.box = base_box
        config.vm.box_version = base_box_version
        node.vm.box_download_insecure = true
        Util.mount_apt_cache(node)
        node.vm.network('private_network', Util.privnet_args("tor#{i}_spine1"))
        node.vm.network('private_network', Util.privnet_args("tor#{i}_spine2"))
        node.vm.network('private_network', Util.privnet_args("tor#{i}_hv"))
        node.vm.network('private_network', Util.privnet_args("management#{i}"))
        node.vm.network('private_network', Util.privnet_args("storage#{i}"))
        setup_proxy(node)
        node.vm.provision 'shell', path: 'provisioner.sh', args: "tor#{i}"
        node.vm.hostname = "tor#{i}"
      end
    end

    # Create 2 spines
    (1..2).each do |i|
      config.vm.define "spine#{i}" do |node|
        node.vm.provider 'virtualbox' do |vb|
          vb.name = "spine#{i}"
          vb.memory = 512
        end
        node.vm.box = base_box
        config.vm.box_version = base_box_version
        node.vm.box_download_insecure = true
        Util.mount_apt_cache(node)
        node.vm.network('private_network', Util.privnet_args("tor1_spine#{i}"))
        node.vm.network('private_network', Util.privnet_args("tor2_spine#{i}"))
        node.vm.network('private_network', Util.privnet_args("tor3_spine#{i}"))
        setup_proxy(node)
        node.vm.provision 'shell', path: 'provisioner.sh', args: "spine#{i}"
        node.vm.hostname = "spine#{i}"
      end
    end
  end
end
