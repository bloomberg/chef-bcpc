# rubocop:disable Metrics/BlockLength

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright 2018, Bloomberg Finance L.P.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'yaml'

topology = './topology/topology.yml'
topology = YAML.load_file(File.expand_path(topology))

project_name = '/' + File.basename(File.dirname(Dir.getwd))
vb_folder = `VBoxManage list systemproperties | grep 'Default machine folder'`
vb_folder = vb_folder.match(/^Default machine folder:\s+(.+)$/)[1]

Vagrant.configure('2') do |config|
  config.ssh.forward_x11 = true
  config.vm.box = 'bento/ubuntu-18.04'
  config.vm.box_download_insecure = true

  topology['nodes'].each do |node|
    config.vm.define node['host'] do |subconfig|
      networks = node['networking']['networks']
      gateway = node['networking']['gateway']
      primary = networks.find { |n| n['type'] == 'primary' }

      subconfig.vm.provision 'shell' do |s|
        s.path = 'provisioners/netcfg.sh'
        s.args = "#{primary['ip']} #{gateway}"
      end

      # network connections
      #
      networks.each do |n|
        args = {}.tap do |a|
          a[:virtualbox__intnet] = n['network']
          a[:nic_type] = '82543GC'
          a[:auto_config] = false
        end

        subconfig.vm.network('private_network', args)
      end

      hw_profiles = topology['hardware_profiles']
      hw_profile = hw_profiles[node['hardware_profile']]

      subconfig.vm.provider 'virtualbox' do |vb|
        vb.name = node['host']
        vb.cpus = hw_profile['cpus']
        vb.memory = hw_profile['ram_gb'] * 1024
        vb.customize ['modifyvm', :id, '--groups', project_name]
        vb.customize ['modifyvm', :id, '--uart1', '0x3F8', '4']
        vb.customize ['modifyvm', :id, '--uart2', '0x2F8', '3']
        vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected']
        vb.customize ['modifyvm', :id, '--uartmode2', 'disconnected']
        vb.customize ['modifyvm', :id, '--vram', '16']

        # add additional hard drives
        if hw_profile.key?('ext_disks')

          size_gb = hw_profile['ext_disks']['size_gb']
          count = hw_profile['ext_disks']['count']
          drive_letters = ('a'..'z').to_a[1..count]

          drive_letters.each_with_index do |l, i|
            drive_file = "sd#{l}.vdi"
            drive_fp = File.join(vb_folder, project_name, vb.name, drive_file)

            next if File.exist?(drive_fp)

            drive_port = i + 1

            vb.customize [
              'createhd',
              '--filename', drive_fp,
              '--size', size_gb * 1024
            ]

            vb.customize [
              'storageattach', :id,
              '--storagectl', 'SATA Controller',
              '--type', 'hdd',
              '--device', 0,
              '--port', drive_port,
              '--medium', drive_fp
            ]
          end
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength
