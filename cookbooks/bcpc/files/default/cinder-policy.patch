diff --git a/cinder/api/contrib/quotas.py b/cinder/api/contrib/quotas.py
index ce60066..9565b28 100644
--- a/cinder/api/contrib/quotas.py
+++ b/cinder/api/contrib/quotas.py
@@ -178,6 +178,10 @@ class QuotaSetsController(wsgi.Controller):
         """
         context = req.environ['cinder.context']
         authorize_show(context)
+        prev_is_admin = context.is_admin
+        # policy check is successful, the following line makes sure
+        # cinder checks are successful as well
+        context.is_admin = True
         params = req.params
         target_project_id = id

@@ -198,13 +202,8 @@ class QuotaSetsController(wsgi.Controller):

             self._authorize_show(context_project, target_project)

-        try:
-            sqlalchemy_api.authorize_project_context(context,
-                                                     target_project_id)
-        except exception.NotAuthorized:
-            raise webob.exc.HTTPForbidden()
-
         quotas = self._get_quotas(context, target_project_id, usage)
+        context.is_admin = prev_is_admin
         return self._format_quota_set(target_project_id, quotas)

     @wsgi.serializers(xml=QuotaTemplate)
@@ -223,6 +222,10 @@ class QuotaSetsController(wsgi.Controller):
         """
         context = req.environ['cinder.context']
         authorize_update(context)
+        prev_is_admin = context.is_admin
+        # policy check is successful, the following line makes sure
+        # cinder checks are successful as well
+        context.is_admin = True
         self.validate_string_length(id, 'quota_set_name',
                                     min_length=1, max_length=255)

@@ -316,7 +319,9 @@ class QuotaSetsController(wsgi.Controller):

         if reservations:
             db.reservation_commit(context, reservations)
-        return {'quota_set': self._get_quotas(context, target_project_id)}
+        return_val = {'quota_set': self._get_quotas(context, target_project_id)}
+        context.is_admin = prev_is_admin
+        return return_val

     def _get_quota_usage(self, quota_obj):
         return (quota_obj.get('in_use', 0) + quota_obj.get('allocated', 0) +
