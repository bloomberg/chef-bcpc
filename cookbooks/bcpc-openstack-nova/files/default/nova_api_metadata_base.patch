diff --git a/nova/api/metadata/base.py b/nova/api/metadata/base.py
index 382378f..369e2c9 100644
--- a/nova/api/metadata/base.py
+++ b/nova/api/metadata/base.py
@@ -14,6 +14,8 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+# THIS FILE PATCHED BY BCPC
+
 """Instance Metadata information."""
 
 import base64
@@ -223,6 +225,11 @@ class InstanceMetadata(object):
         fixed_ips = self.ip_info['fixed_ips']
         fixed_ip = fixed_ips and fixed_ips[0] or ''
 
+        if floating_ip != '':
+            public_hostname = self._get_public_hostname(floating_ip)
+        else:
+            public_hostname = ''
+
         fmt_sgroups = [x['name'] for x in self.security_groups]
 
         meta_data = {
@@ -251,7 +258,7 @@ class InstanceMetadata(object):
 
         if self._check_version('2007-01-19', version):
             meta_data['local-hostname'] = hostname
-            meta_data['public-hostname'] = hostname
+            meta_data['public-hostname'] = public_hostname
             meta_data['public-ipv4'] = floating_ip
 
         if False and self._check_version('2007-03-01', version):
@@ -372,8 +379,19 @@ class InstanceMetadata(object):
     def _check_os_version(self, required, requested):
         return self._check_version(required, requested, OPENSTACK_VERSIONS)
 
+    def _aws_style_internal_hostname(self):
+        return 'ip-%s' % str(self.address).replace('.', '-')
+
+    def _aws_style_public_hostname(self, public_address):
+        return 'public-%s' % str(public_address).replace('.', '-')
+
     def _get_hostname(self):
-        return "%s%s%s" % (self.instance.hostname,
+        return "%s%s%s" % (self._aws_style_internal_hostname(),
+                           '.' if CONF.dhcp_domain else '',
+                           CONF.dhcp_domain)
+
+    def _get_public_hostname(self, public_address):
+        return "%s%s%s" % (self._aws_style_public_hostname(public_address),
                            '.' if CONF.dhcp_domain else '',
                            CONF.dhcp_domain)
 
