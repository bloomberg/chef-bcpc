diff --git a/nova/compute/api.py b/nova/compute/api.py
index 3d04052..3e6bde3 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -651,7 +651,8 @@ class API(base.Base):
         # reason, we rely on the DB to cast True to a String.
         return True if bool_val else ''
 
-    def _check_requested_image(self, context, image_id, image, instance_type):
+    def _check_requested_image(self, context, image_id, image,
+                               instance_type, root_bdm):
         if not image:
             return
 
@@ -668,15 +669,63 @@ class API(base.Base):
         if instance_type['memory_mb'] < int(image.get('min_ram') or 0):
             raise exception.FlavorMemoryTooSmall()
 
-        # NOTE(johannes): root_gb is allowed to be 0 for legacy reasons
-        # since libvirt interpreted the value differently than other
-        # drivers. A value of 0 means don't check size.
-        root_gb = instance_type['root_gb']
-        if root_gb:
-            if int(image.get('size') or 0) > root_gb * (1024 ** 3):
-                raise exception.FlavorDiskTooSmall()
+        # Image min_disk is in gb, size is in bytes. For sanity, have them both
+        # in bytes.
+        image_min_disk = int(image.get('min_disk') or 0) * units.Gi
+        image_size = int(image.get('size') or 0)
+
+        # Target disk is a volume. Don't check flavor disk size because it
+        # doesn't make sense, and check min_disk against the volume size.
+        if (root_bdm is not None and root_bdm.is_volume):
+            # There are 2 possibilities here: either the target volume already
+            # exists, or it doesn't, in which case the bdm will contain the
+            # intended volume size.
+            #
+            # Cinder does its own check against min_disk, so if the target
+            # volume already exists this has already been done and we don't
+            # need to check it again here. In this case, volume_size may not be
+            # set on the bdm.
+            #
+            # If we're going to create the volume, the bdm will contain
+            # volume_size. Therefore we should check it if it exists. This will
+            # still be checked again by cinder when the volume is created, but
+            # that will not happen until the request reaches a host. By
+            # checking it here, the user gets an immediate and useful failure
+            # indication.
+            #
+            # The third possibility is that we have failed to consider
+            # something, and there are actually more than 2 possibilities. In
+            # this case cinder will still do the check at volume creation time.
+            # The behaviour will still be correct, but the user will not get an
+            # immediate failure from the api, and will instead have to
+            # determine why the instance is in an error state with a task of
+            # block_device_mapping.
+            #
+            # We could reasonably refactor this check into _validate_bdm at
+            # some future date, as the various size logic is already split out
+            # in there.
+            dest_size = root_bdm.volume_size
+            if dest_size is not None:
+                dest_size *= units.Gi
+
+                if image_min_disk > dest_size:
+                    # TODO(mdbooth) Raise a more descriptive exception here.
+                    # This is the exception which calling code expects, but
+                    # it's potentially misleading to the user.
+                    raise exception.FlavorDiskTooSmall()
+
+        # Target disk is a local disk whose size is taken from the flavor
+        else:
+            dest_size = instance_type['root_gb'] * units.Gi
+
+            # NOTE(johannes): root_gb is allowed to be 0 for legacy reasons
+            # since libvirt interpreted the value differently than other
+            # drivers. A value of 0 means don't check size.
+            if dest_size != 0:
+                if image_size > dest_size:
+                    raise exception.FlavorDiskTooSmall()
 
-            if int(image.get('min_disk') or 0) > root_gb:
+                if image_min_disk > dest_size:
                     raise exception.FlavorDiskTooSmall()
 
     def _get_image_defined_bdms(self, base_options, instance_type, image_meta,
@@ -767,10 +816,11 @@ class API(base.Base):
 
     def _checks_for_create_and_rebuild(self, context, image_id, image,
                                        instance_type, metadata,
-                                       files_to_inject):
+                                       files_to_inject, root_bdm):
         self._check_metadata_properties_quota(context, metadata)
         self._check_injected_file_quota(context, files_to_inject)
-        self._check_requested_image(context, image_id, image, instance_type)
+        self._check_requested_image(context, image_id, image,
+                                    instance_type, root_bdm)
 
     def _validate_and_build_base_options(self, context, instance_type,
                                          boot_meta, image_href, image_id,
@@ -778,7 +828,7 @@ class API(base.Base):
                                          display_description, key_name,
                                          key_data, security_groups,
                                          availability_zone, forced_host,
-                                         user_data, metadata, injected_files,
+                                         user_data, metadata,
                                          access_ip_v4, access_ip_v6,
                                          requested_networks, config_drive,
                                          auto_disk_config, reservation_id,
@@ -810,9 +860,6 @@ class API(base.Base):
             except base64.binascii.Error:
                 raise exception.InstanceUserDataMalformed()
 
-        self._checks_for_create_and_rebuild(context, image_id, boot_meta,
-                instance_type, metadata, injected_files)
-
         self._check_requested_secgroups(context, security_groups)
 
         # Note:  max_count is the number of instances requested by the user,
@@ -1095,7 +1142,7 @@ class API(base.Base):
                 instance_type, boot_meta, image_href, image_id, kernel_id,
                 ramdisk_id, display_name, display_description,
                 key_name, key_data, security_groups, availability_zone,
-                forced_host, user_data, metadata, injected_files, access_ip_v4,
+                forced_host, user_data, metadata, access_ip_v4,
                 access_ip_v6, requested_networks, config_drive,
                 auto_disk_config, reservation_id, max_count)
 
@@ -1115,6 +1162,12 @@ class API(base.Base):
             base_options, instance_type, boot_meta, min_count, max_count,
             block_device_mapping, legacy_bdm)
 
+        # We can't do this check earlier because we need bdms from all sources
+        # to have been merged in order to get the root bdm.
+        self._checks_for_create_and_rebuild(context, image_id, boot_meta,
+                instance_type, metadata, injected_files,
+                block_device_mapping.root_bdm())
+
         instance_group = self._get_requested_instance_group(context,
                                    scheduler_hints, check_server_group_quota)
 
@@ -2333,8 +2386,9 @@ class API(base.Base):
         self._check_auto_disk_config(image=image, **kwargs)
 
         flavor = instance.get_flavor()
+        root_bdm = self._get_root_bdm(context, instance)
         self._checks_for_create_and_rebuild(context, image_id, image,
-                flavor, metadata, files_to_inject)
+                flavor, metadata, files_to_inject, root_bdm)
 
         kernel_id, ramdisk_id = self._handle_kernel_and_ramdisk(
                 context, None, None, image)
@@ -3201,15 +3255,18 @@ class API(base.Base):
         uuids = [instance.uuid for instance in instances]
         return self.db.instance_fault_get_by_instance_uuids(context, uuids)
 
-    def is_volume_backed_instance(self, context, instance, bdms=None):
-        if not instance.image_ref:
-            return True
-
+    def _get_root_bdm(self, context, instance, bdms=None):
         if bdms is None:
             bdms = objects.BlockDeviceMappingList.get_by_instance_uuid(
                     context, instance.uuid)
 
-        root_bdm = bdms.root_bdm()
+        return bdms.root_bdm()
+
+    def is_volume_backed_instance(self, context, instance, bdms=None):
+        if not instance.image_ref:
+            return True
+
+        root_bdm = self._get_root_bdm(context, instance, bdms)
         if not root_bdm:
             return False
         return root_bdm.is_volume
